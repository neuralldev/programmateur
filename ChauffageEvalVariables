$scenario->setLog( 'demarrage');
// récupère le nom d'équipement du thermostat, s'il y en a plusieurs, travaille sur le premier
// il est possible de mettre le nom à la main également s'il y en a plusieurs
$szThermostatName=$scenario->getData('ChaudiereThermostat');
if ($szThermostatName=='') { 
  // liste les équipements de la catégorie heating
  $eql = eqLogic::byCategorie('heating');
  foreach ($eql as $e) {
    $scenario->setLog( 'record found');
    $i = $e->getId();
    $n = $e->getEqType_name();
    $c = $e->getConfiguration();
    if (($n=='thermostat') && array_key_exists('heating',$c) && array_key_exists('coeff_indoor_heat',$c) ) {
      $szThermostatName = $e->getHumanName();
      $scenario->setLog( $szThermostatName.' '.'info id='.$i.' type='.$n);  
      $scenario->setData('ChaudiereThermostat', $szThermostatName);
      break;
    }
    // génère les jours fériés
  }
  if ($szThermostatName=='') { 
    // un nom de thermostat est obligatoire pour le fonctionnement, si on le trouve pas il faut arrêter
    $scenario->Stop();
    $scenario->setLog( 'aucun thermostat trouvé, la programmation ne peut être lancée !');    
  }
}
$scenario->setLog( 'thermostat utilisé '.$szThermostatName);    

// évaluation de la période de chauffe annuelle 
$CDEBUT = '15/10'; // début de chauffe par défaut
$CFIN   = '15/04'; // fin de chauffe par défaut

$iAn = date('Y');

$s = $scenario->getData('ChaudiereDebutChauffe');
if ($s=="") {
  $s = $CDEBUT;
  $scenario->setLog( 'création des constantes de chauffe, début de période='.$s);
  $scenario->setData('ChaudiereDebutChauffe', $CDEBUT); $scenario->save();
}
$s = $s.'/'.$iAn;
$scenario->setLog( 'début de période ='.$s);
$debutChauffe = DateTime::createFromFormat('d/m/Y', $s);
//$debutChauffe->setTime(0, 0, 0);
  $scenario->setLog( 'debut='.$debutChauffe->format('Y-m-d'));

$s = $scenario->getData('ChaudiereFinChauffe');
$scenario->setLog( 'fin de période ='.$s);
if ($s=="") {
  $scenario->setData('ChaudiereFinChauffe', $CFIN); $scenario->save();
  $s = $CFIN;
  $scenario->setLog( 'création des constantes de chauffe, fin de période='.$s);
}
$s =$s.'/'.$iAn;
$finChauffe = DateTime::createFromFormat('d/m/Y', $s);
//$finChauffe->setTime(0, 0, 0);
  $scenario->setLog( 'fin='.$finChauffe->format('Y-m-d'));
//$finChauffe = date_create($t);

$dActuelle = new DateTime('now');
//$dActuelle = DateTime::createFromFormat('d/m/Y', '01/05/2016');
 $scenario->setLog( 'date actuelle = '.$dActuelle->format('Y-m-d'));

if (($dActuelle >= $debutChauffe) || ($dActuelle <=$finChauffe))
  $scenario->setLog( 'en période de chauffe');
else
  $scenario->setLog( 'en période d\'été');

// 1 = en chauffe, 0=hors chauffe
$scenario->setData('ChaudierePeriodeChauffe',(($dActuelle >= $debutChauffe) || ($dActuelle <=$finChauffe))? 1 : 0);

// évaluation des jours fériés

// construction de la liste des jours fériés annuels de l'année en cours
$easterDate  = easter_date($iAn);
$easterDay   = date('j', $easterDate);
$easterMonth = date('n', $easterDate);
$easterYear   = date('Y', $easterDate);

$holidays = array(
  // Dates fixes
  mktime(0, 0, 0, 1,  1,  $iAn),  // 1er janvier
  mktime(0, 0, 0, 5,  1,  $iAn),  // Fête du travail
  mktime(0, 0, 0, 5,  8,  $iAn),  // Victoire des alliés
  mktime(0, 0, 0, 7,  14, $iAn),  // Fête nationale
  mktime(0, 0, 0, 8,  15, $iAn),  // Assomption
  mktime(0, 0, 0, 11, 1,  $iAn),  // Toussaint
  mktime(0, 0, 0, 11, 11, $iAn),  // Armistice
  mktime(0, 0, 0, 12, 25, $iAn),  // Noel

  // Dates variables
  mktime(0, 0, 0, $easterMonth, $easterDay + 1,  $easterYear),
  mktime(0, 0, 0, $easterMonth, $easterDay + 39, $easterYear),
  mktime(0, 0, 0, $easterMonth, $easterDay + 50, $easterYear),
);

sort($holidays);

for ($i = 0; $i < count($holidays); $i++)
	$holidays[$i] = date('d/m/Y', $holidays[$i]);
$b = array_search($dActuelle->format('d/m/Y'), $holidays, true);
if ($b == FALSE)
  $scenario->setLog( 'pas férié');
else
  $scenario->setLog( 'férié clé='.$b);

// 1 = férié, 0 = pas férié
$scenario->setData('ChaudiereFerie',(($b==FALSE)? 0 : 1));

$b = (date('w') == 6) || (date('w')==0);
if ($b == FALSE)
  $scenario->setLog( 'en semaine');
else
  $scenario->setLog( 'en week end');

// 1 = week-end, 0 = semaine
$scenario->setData('ChaudiereWeekEnd',(($b==FALSE)? 0 : 1));

// section pour évaluer les valeurs du programmateur par défaut
$scenario->setLog('debut évaluation variables programmateur');
$prgStandard = $scenario->getData('ChaudiereProgrammeStandard');
$prgWeekEnd = $scenario->getData('ChaudiereProgrammeWeekEnd');
$prgFeries = $scenario->getData('ChaudiereProgrammeFeries');

$aKeys =array('heure','mode');
$dProgrammeStandard = array();
$dProgrammeWeekEnd = array();
$dProgrammeFeries = array();

// les modes attendus sont
// 'Hors Gel' : période d'absence où maintenir une température sans gel en hiver
// 'Eco'      : baisse de température de nuit
// 'Confort'  : température en journée présent
if ($prgStandard==NULL) {
  $scenario->setLog( 'init mode standard');
  $dProgrammeStandard = array(
      array("heure" => "06:30", "mode" => "Confort"),
      array("heure" => "08:30", "mode" => "Eco"),
      array("heure" => "18:30", "mode" => "Confort"),
      array("heure" => "22:00", "mode" => "Eco")
  );
} else $dProgrammeStandard = $prgStandard;
	$scenario->setData('ChaudiereProgrammeStandard', implode('/', array_map(function($el){ return $el['heure'].','.$el['mode']; }, $dProgrammeStandard)));
  
if ($prgWeekEnd==NULL) {
  $scenario->setLog( 'init mode weekend');
  $dProgrammeWeekEnd = array(
      array("heure" => "07:30", "mode" => "Confort"),
      array("heure" => "22:00", "mode" => "Eco")
  );
} else $dProgrammeWeekEnd  = $prgWeekEnd;
	$scenario->setData('ChaudiereProgrammeWeekEnd', implode('/', array_map(function($el){ return $el['heure'].','.$el['mode']; }, $dProgrammeWeekEnd)));
  

if ($prgFeries==NULL) {
  $scenario->setLog( 'init mode jours férié');
  $dProgrammeFeries = array(
      array("heure" => "08:30", "mode" => "Confort"),
      array("heure" => "22:00", "mode" => "Eco")
  );
} else $dProgrammeFeries  = $prgFeries;
	$scenario->setData('ChaudiereProgrammeFeries', implode('/', array_map(function($el){ return $el['heure'].','.$el['mode']; }, $dProgrammeFeries)));

$scenario->setLog('programmation : ');
$scenario->setLog('standard  : '.json_encode($dProgrammeStandard, true));
$scenario->setLog('week-end  : '.json_encode($dProgrammeWeekEnd, true));
$scenario->setLog('j. fériés : '.json_encode($dProgrammeFeries, true));

// réglage des modes de départ et retour de vacances
$szMode = $scenario->getData('ChaudiereDepartVacances');
if ($szMode == '') // aucun mode programmé, on met une valeur par défaut à Hors Gel
  $scenario->setData('ChaudiereDepartVacances', 'Hors Gel');
$szMode = $scenario->getData('ChaudiereRetourVacances');
if ($szMode == '') // aucun mode programmé, on met une valeur par défaut à Confort
  $scenario->setData('ChaudiereRetourVacances', 'Confort');

// réglage des modes de départ et retour d'absence courte
$szMode = $scenario->getData('ChaudiereSortieNormale');
if ($szMode == '') // aucun mode programmé, on met une valeur par défaut à Eco
  $scenario->setData('ChaudiereSortieNormale', 'Eco');
$szMode = $scenario->getData('ChaudiereEntreeNormale');
if ($szMode == '') // aucun mode programmé, on met une valeur par défaut à Confort
  $scenario->setData('ChaudiereEntreeNormale', 'Confort');

// auto programmation, exécution toutes les jours à minuit une pour revoir les flags
$scenario->setMode("schedule");
$scenario->setSchedule('15 0 * * *');
$scenario->save();

// programme maintenant le déclenchement du programmateur correctement, ce dernier en dehors des période de chauffe se désactivera à la première itération
$scList = $scenario->byObjectNameGroupNameScenarioName('Aucun','Chauffage','ChauffageProgrammation');
if ($scList ==NULL) {
  $scenario->setLog('scenario non trouvé, arrêt'); $scenario->stop();
}	 else
{
  $scenario->setLog('scenario évaluation des variables déclenché'); 
  $scList->setMode("schedule");
  $scList->setSchedule(array('0 * * * *','30 * * * *'));
  $scList->save();
}
